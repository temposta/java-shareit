 DROP VIEW items_owner_dto;
 DROP TABLE IF EXISTS comments;
 DROP TABLE IF EXISTS bookings;
DROP TABLE IF EXISTS requests;
 DROP TABLE IF EXISTS items;
 DROP TABLE IF EXISTS users;

-- Table: users

CREATE TABLE IF NOT EXISTS users
(
    id    bigint                 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name  character varying(255) NOT NULL,
    email character varying(512) NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

COMMENT ON TABLE users
    IS 'Таблица для хранения пользователей';

-- Table: items

CREATE TABLE IF NOT EXISTS items
(
    id           bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name         character varying(255),
    description  character varying(512),
    is_available boolean,
    owner_id     bigint,
    request_id   bigint,
    CONSTRAINT items_pkey PRIMARY KEY (id),
    CONSTRAINT owner_fkey FOREIGN KEY (owner_id)
        REFERENCES users (id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

-- Table: requests

CREATE TABLE IF NOT EXISTS requests
(
    id           bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    description  character varying(512),
    requestor_id bigint,
    created_date timestamp              NOT NULL,
    CONSTRAINT requests_pkey PRIMARY KEY (id),
    CONSTRAINT requestor_fkey FOREIGN KEY (requestor_id)
        REFERENCES users (id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

-- Table: bookings

CREATE TABLE IF NOT EXISTS bookings
(
    id         bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    start_date timestamp without time zone,
    end_date   timestamp without time zone,
    item_id    bigint,
    booker_id  bigint,
    status     character varying(30),
    CONSTRAINT bookings_pkey PRIMARY KEY (id),
    CONSTRAINT booker_fkey FOREIGN KEY (booker_id)
        REFERENCES users (id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT item_fkey FOREIGN KEY (item_id)
        REFERENCES items (id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

-- Table: comments

CREATE TABLE IF NOT EXISTS comments
(
    id           bigint                 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    text         character varying(512) NOT NULL,
    item_id      BIGINT REFERENCES items (id) ON DELETE CASCADE,
    author_id    BIGINT REFERENCES users (id) ON DELETE CASCADE,
    created_date timestamp              NOT NULL,
    CONSTRAINT comments_pkey PRIMARY KEY (id)
);

-- View: items_owner_dto

CREATE OR REPLACE VIEW items_owner_dto
AS
SELECT b.id,
       b.name,
       b.description,
       b.is_available,
       b.owner_id,
       lb.lastbooking,
       nb.nextbooking
FROM items b
         LEFT JOIN (SELECT bookings.item_id,
                           max(bookings.end_date) AS lastbooking
                    FROM bookings
                    WHERE bookings.start_date < current_date
                      AND bookings.status = 'APPROVED'
                    GROUP BY bookings.item_id) lb ON b.id = lb.item_id
         LEFT JOIN (SELECT bookings.item_id,
                           min(bookings.start_date) AS nextbooking
                    FROM bookings
                    WHERE bookings.start_date > now()
                      AND (bookings.status = ANY
                           (ARRAY ['APPROVED', 'WAITING']))
                    GROUP BY bookings.item_id) nb ON b.id = nb.item_id
ORDER BY b.id;